In this engine, shaders play a critical role in rendering a 3D object with realistic lighting and color by handling all the calculations for how light interacts with the cube's surfaces. The vertex shader runs for every vertex on the cube, transforming its position using the model, view, and projection matrices so it renders correctly in 3D space. Additionally, it calculates the position and normal of each vertex in world coordinates, which is then passed on to later stages. The processed vertex data, including normals needed for lighting, is then smoothly interpolated across the cubeâ€™s faces, preparing for detailed shading calculations in the fragment shader.

This interactive demo also incorporates intuitive controls for exploring the lit cube. Holding the right mouse button and dragging the mouse adjusts the angle of the camera, simulating a first-person view. The arrow keys let the cube rotate forward, backward, left, or right within the scene, allowing for dynamic movement around the object. Meanwhile, the WASD keys directly move the cube to their respective locations, so the user can inspect how lighting changes depending on location of the cube. As the user manipulates the camera or the cube, the fragment shader recomputes all lighting for every visible pixel, blending ambient, diffuse, and specular terms based on the current positions of the cube, light, and view, ensuring that lighting remains realistic and responsive to all movements.